var MAXSEEDS=48,NUM_HOUSES=6,SowDirType;!function(a){a[a.RtoL=0]="RtoL",a[a.LtoR=1]="LtoR"}(SowDirType||(SowDirType={}));var gameLogic;!function(a){function b(){var a;return a.boardSides.push({store:0,house:[4,4,4,4,4,4],sowDir:SowDirType.RtoL}),a.boardSides.push({store:0,house:[4,4,4,4,4,4],sowDir:SowDirType.LtoR}),a}function c(a){return 0===a.house.reduce(function(a,b){return a+b})}function d(a){return a.house.reduce(function(a,b){return a+b})+a.store}function e(a){return c(a.boardSides[0])||c(a.boardSides[1])?d(a.boardSides[0])===Math.floor(MAXSEEDS/2):!1}function f(a){return d(a.boardSides[0])>Math.floor(MAXSEEDS/2)?a.boardSides[0]:a.boardSides[1]}function g(a,b){for(var c=[],d=0;NUM_HOUSES>d;d++)try{if(0!==a.boardSides[b].house[d]){var e={boardSideId:b,house:d,nitems:a.boardSides[b].house[d]};c.push(h(a,e,b))}}catch(f){}return c}function h(a,c,d){if(a||(a=b()),e(a)||null!==f(a))throw new Error("Can only make a move if the game is not over!");if(c.boardSideId!==d)throw new Error("Playing out of turn?");if(0===c.nitems)throw new Error("Sowing zero seeds?");var g=angular.copy(a),h=d,i=(c.nitems,a.boardSides[d].sowDir);g.boardSides[d].house[c.house]=0;var j;for(j.store=!1;c.nitems>0;){j.sowDir=g.boardSides[d].sowDir===SowDirType.RtoL?SowDirType.RtoL:SowDirType.LtoR;for(var k=c.house+1;NUM_HOUSES>k&&(g.boardSides[d].house[c.house]++,c.nitems--,j.houseNum=k,j.store=!1,0!==c.nitems);k++);c.nitems>0&&h===d&&(g.boardSides[d].store++,j.houseNum=NUM_HOUSES,j.store=!0,c.nitems--),d=1-d}j.store||j.sowDir!==i||1!==g.boardSides[h].house[j.houseNum]||(g.boardSides[h].store+=g.boardSides[1-h].house[NUM_HOUSES-1-j.houseNum]+1,g.boardSides[h].house[j.houseNum]=0,g.boardSides[1-h].house[NUM_HOUSES-1-j.houseNum]=0);var l,m=f(g);l=e(g)||null!==m?{endMatch:{endMatchScores:m.sowDir===SowDirType.LtoR?[0,1]:m.sowDir===SowDirType.RtoL?[1,0]:[0,0]}}:j.store?{setTurn:{turnIndex:h}}:{setTurn:{turnIndex:1-h}};var n=c;return[l,{set:{key:"board",value:g}},{set:{key:"delta",value:n}}]}function i(a){var b=a.move,c=a.turnIndexBeforeMove,d=a.stateBeforeMove;try{var e=b[2].set.value,f=d.board,g=h(f,e,c);if(!angular.equals(b,g))return!1}catch(i){return!1}return!0}a.getInitialBoard=b,a.getPossibleMoves=g,a.createMove=h,a.isMoveOk=i}(gameLogic||(gameLogic={}));var game;!function(a){function b(){console.log("Translation of 'RULES_OF_TICTACTOE' is "+translate("RULES_OF_TICTACTOE")),resizeGameAreaService.setWidthToHeight(1),gameService.setGame({minNumberOfPlayers:2,maxNumberOfPlayers:2,isMoveOk:gameLogic.isMoveOk,updateUI:e}),document.addEventListener("animationend",c,!1),document.addEventListener("webkitAnimationEnd",c,!1),document.addEventListener("oanimationend",c,!1)}function c(){$rootScope.$apply(function(){log.info("Animation ended"),k=!0,m&&d()})}function d(){gameService.makeMove(aiService.createComputerMove(n.board,o,{millisecondsLimit:1e3}))}function e(a){k=!1,n=a.stateAfterMove,n.board||(n.board=gameLogic.getInitialBoard()),l=a.turnIndexAfterMove>=0&&a.yourPlayerIndex===a.turnIndexAfterMove,o=a.turnIndexAfterMove,m=l&&""===a.playersInfo[a.yourPlayerIndex].playerId,m&&(l=!1,n.delta||d())}function f(a,b){if(log.info(["Clicked on cell:",a,b]),"?throwException"===window.location.search)throw new Error("Throwing the error because URL has '?throwException'");if(l)try{var c=gameLogic.createMove(n.board,a,b,o);l=!1,gameService.makeMove(c)}catch(d){return void log.info(["Cell is already full in position:",a,b])}}function g(a,b){var c=n.board[a][b];return""!==c}function h(a,b){return"X"===n.board[a][b]}function i(a,b){return"O"===n.board[a][b]}function j(a,b){return!k&&n.delta&&n.delta.row===a&&n.delta.col===b}var k=!1,l=!1,m=!1,n=null,o=null;a.isHelpModalShown=!1,a.init=b,a.cellClicked=f,a.shouldShowImage=g,a.isPieceX=h,a.isPieceO=i,a.shouldSlowlyAppear=j}(game||(game={})),angular.module("myApp",["ngTouch","ui.bootstrap"]).run(["initGameServices",function(){$rootScope.game=game,translate.setLanguage("en",{RULES_OF_TICTACTOE:"Rules of TicTacToe",RULES_SLIDE1:"You and your opponent take turns to mark the grid in an empty spot. The first mark is X, then O, then X, then O, etc.",RULES_SLIDE2:"The first to mark a whole row, column or diagonal wins.",CLOSE:"Close"}),game.init()}]);var aiService;!function(a){function b(a,b,f){return alphaBetaService.alphaBetaDecision([null,{set:{key:"board",value:a}}],b,d,c,"?debug"===window.location.search?e:null,f)}function c(a){if(a[0].endMatch){var b=a[0].endMatch.endMatchScores;return b[0]>b[1]?Number.POSITIVE_INFINITY:b[0]<b[1]?Number.NEGATIVE_INFINITY:0}return 0}function d(a,b){return gameLogic.getPossibleMoves(a[1].set.value,b)}function e(a){return"\n"+a[1].set.value.join("\n")+"\n"}a.createComputerMove=b}(aiService||(aiService={}));
//# sourceMappingURL=everything.min.js.map