var MAXSEEDS=48,NUM_HOUSES=6,SowDirType;!function(a){a[a.RtoL=0]="RtoL",a[a.LtoR=1]="LtoR"}(SowDirType||(SowDirType={}));var gameLogic;!function(a){function b(){var a={store:0,house:[4,4,4,4,4,4],sowDir:SowDirType.RtoL},b={store:0,house:[4,4,4,4,4,4],sowDir:SowDirType.LtoR},c={boardSides:[b,a]};return c}function c(a){return 0===a.house.reduce(function(a,b){return a+b})}function d(a){return a.house.reduce(function(a,b){return a+b})+a.store}function e(a){return c(a.boardSides[0])||c(a.boardSides[1])?d(a.boardSides[0])===Math.floor(MAXSEEDS/2):!1}function f(a){return c(a.boardSides[0])||c(a.boardSides[1])?d(a.boardSides[0])>Math.floor(MAXSEEDS/2)?a.boardSides[0]:a.boardSides[1]:null}function g(a,c,d){if(a||(a=b()),e(a)||null!==f(a))throw new Error("Can only make a move if the game is not over!");if(0===c.nitems)throw new Error("Sowing zero seeds?");var g=angular.copy(c),h=angular.copy(a),i=d,j=(g.nitems,a.boardSides[d].sowDir);h.boardSides[d].house[g.house]=0;for(var k={sowDir:void 0,houseNum:void 0,store:!1},l=g.house+1;g.nitems>0;){k.sowDir=h.boardSides[d].sowDir===SowDirType.RtoL?SowDirType.RtoL:SowDirType.LtoR;for(var m=l;NUM_HOUSES>m&&(h.boardSides[d].house[m]++,g.nitems--,k.houseNum=m,k.store=!1,0!==g.nitems);m++);g.nitems>0&&i===d&&(h.boardSides[d].store++,k.houseNum=NUM_HOUSES,k.store=!0,g.nitems--),d=1-d,l=0}k.store||k.sowDir!==j||1!==h.boardSides[i].house[k.houseNum]||h.boardSides[1-i].house[NUM_HOUSES-1-k.houseNum]>0&&(h.boardSides[i].store+=h.boardSides[1-i].house[NUM_HOUSES-1-k.houseNum]+1,h.boardSides[i].house[k.houseNum]=0,h.boardSides[1-i].house[NUM_HOUSES-1-k.houseNum]=0);var n,o=f(h);n=e(h)?{endMatch:{endMatchScores:[0,0]}}:null!==o?{endMatch:{endMatchScores:o.sowDir===SowDirType.LtoR?[1,0]:[0,1]}}:k.store?{setTurn:{turnIndex:i}}:{setTurn:{turnIndex:1-i}};var p=angular.copy(c);return[n,{set:{key:"board",value:h}},{set:{key:"delta",value:p}}]}function h(a){var b=a.move,c=a.turnIndexBeforeMove,d=a.stateBeforeMove;try{var e=b[2].set.value,f=angular.copy(e),h=d.board,i=g(h,f,c);if(!angular.equals(b,i))return!1}catch(j){return!1}return!0}a.getInitialBoard=b,a.createMove=g,a.isMoveOk=h}(gameLogic||(gameLogic={}));var game;!function(a){function b(){console.log("Translation of 'RULES_OF_KALAH' is "+translate("RULES_OF_KALAH")),resizeGameAreaService.setWidthToHeight(1),gameService.setGame({minNumberOfPlayers:2,maxNumberOfPlayers:2,isMoveOk:gameLogic.isMoveOk,updateUI:e}),document.addEventListener("animationend",c,!1),document.addEventListener("webkitAnimationEnd",c,!1),document.addEventListener("oanimationend",c,!1)}function c(){$rootScope.$apply(function(){log.info("Animation ended"),o=!0,q&&d()})}function d(){gameService.makeMove(aiService.createComputerMove(r.board,t,{millisecondsLimit:1e3}))}function e(a){o=!1,r=a.stateAfterMove,s=a.stateBeforeMove,r.board||(r.board=gameLogic.getInitialBoard()),p=a.turnIndexAfterMove>=0&&a.yourPlayerIndex===a.turnIndexAfterMove,t=a.turnIndexAfterMove,q=p&&""===a.playersInfo[a.yourPlayerIndex].playerId,q&&(p=!1,d())}function f(a){return r.board.boardSides[a].store}function g(a,b,c){var d=2*b+c+1;return r.board.boardSides[a].store>=d?!0:!1}function h(){for(var a=[],b=0;MAXSEEDS/2>b;b++)a[b]=b;return a}function i(){for(var a=[],b=0;NUM_HOUSES>b;b++)a[b]=b;return a}function j(){for(var a=[],b=0;u>b;b++)a[b]=b;return a}function k(a,b,c,d){var e=b;1===a&&(e=NUM_HOUSES-1-b);var f=r.board.boardSides[a].house[e],g=2*c+d+1;return f>=g?!0:!1}function l(a,b){if(p&&t==a){1===a&&(b=NUM_HOUSES-1-b);var c=r.board.boardSides[a].house[b];if(0!==c){var d={boardSideId:a,house:b,nitems:c};try{var e=gameLogic.createMove(r.board,d,t);p=!1,gameService.makeMove(e)}catch(f){return void log.info(["Invalid move:",a,b])}}}}function m(a,b,c){if(!r)return!1;if(!s)return!1;if(!s.board)return!1;var d=c;1===a&&(d=NUM_HOUSES-1-d);var e=s.board.boardSides[a].store,f=r.board.boardSides[a].store;if(e>=f)return!1;var g=2*b+c+1;return g>=e?!0:!1}function n(a){if(!r)return!1;if(!s)return!1;if(!s.board)return!1;var b=s.board.boardSides[a].store,c=r.board.boardSides[a].store;return c!==b}var o=!1,p=!1,q=!1,r=null,s=null,t=null;a.isHelpModalShown=!1;var u=8;a.init=b,a.getStoreCount=f,a.isKalahInStore=g,a.getStoreDisplayRowArray=h,a.getHouseArray=i,a.getHouseRowArray=j,a.IsKalahInHouseCell=k,a.houseClicked=l,a.shouldSlowlyAppearInStore=m,a.shouldSlowlyAppearStoreCount=n}(game||(game={})),angular.module("myApp",["ngTouch","ui.bootstrap","gameServices"]).run(function(){$rootScope.game=game,translate.setLanguage("en",{RULES_OF_KALAH:"Rules of Kalah",RULES_SLIDE1:"Players take turns to sow the seeds anti-clockwise.",RULES_SLIDE2:"The one to collect more than 24 seeds in their store wins.",CLOSE:"Close"}),game.init()});var aiService;!function(a){function b(a,b,e){return alphaBetaService.alphaBetaDecision([null,{set:{key:"board",value:a}}],b,d,c,null,e)}function c(a){if(a[0].endMatch){var b=a[0].endMatch.endMatchScores;return b[0]>b[1]?Number.POSITIVE_INFINITY:b[0]<b[1]?Number.NEGATIVE_INFINITY:0}return 0}function d(b,c){return a.getPossibleMoves(b[1].set.value,c)}function e(a,b){for(var c=[],d=0;NUM_HOUSES>d;d++)try{if(0!==a.boardSides[b].house[d]){var e={boardSideId:b,house:d,nitems:a.boardSides[b].house[d]};c.push(gameLogic.createMove(a,e,b))}}catch(f){}return c}a.createComputerMove=b,a.getPossibleMoves=e}(aiService||(aiService={}));
//# sourceMappingURL=everything.min.js.map